// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Concrete.EntityFramework.Migrations
{
    [DbContext(typeof(TourCompanyDbContext))]
    [Migration("20220116222657_add-column-tours-guide")]
    partial class addcolumntoursguide
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concrete.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Entities.Concrete.Guide", b =>
                {
                    b.Property<int>("GuideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideId"), 1L, 1);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("GuideId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.HasKey("InvoiceNo");

                    b.HasIndex("TouristId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Entities.Concrete.InvoiceDetail", b =>
                {
                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceNo", "TourId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Entities.Concrete.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Entities.Concrete.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationalityId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Entities.Concrete.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PlaceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Entities.Concrete.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"), 1L, 1);

                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("TourDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TourId");

                    b.HasIndex("GuideId")
                        .IsUnique();

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Entities.Concrete.Tourist", b =>
                {
                    b.Property<int>("TouristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("TouristId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Tourists");
                });

            modelBuilder.Entity("GuideLanguage", b =>
                {
                    b.Property<int>("GuidesGuideId")
                        .HasColumnType("int");

                    b.Property<int>("LanguagesLanguageId")
                        .HasColumnType("int");

                    b.HasKey("GuidesGuideId", "LanguagesLanguageId");

                    b.HasIndex("LanguagesLanguageId");

                    b.ToTable("GuideLanguage");
                });

            modelBuilder.Entity("PlaceTour", b =>
                {
                    b.Property<int>("PlacesPlaceId")
                        .HasColumnType("int");

                    b.Property<int>("ToursTourId")
                        .HasColumnType("int");

                    b.HasKey("PlacesPlaceId", "ToursTourId");

                    b.HasIndex("ToursTourId");

                    b.ToTable("PlaceTour");
                });

            modelBuilder.Entity("TourTourist", b =>
                {
                    b.Property<int>("TouristsTouristId")
                        .HasColumnType("int");

                    b.Property<int>("ToursTourId")
                        .HasColumnType("int");

                    b.HasKey("TouristsTouristId", "ToursTourId");

                    b.HasIndex("ToursTourId");

                    b.ToTable("TourTourist");
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.HasOne("Entities.Concrete.Tourist", "Tourist")
                        .WithOne("Invoice")
                        .HasForeignKey("Entities.Concrete.Invoice", "TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("Entities.Concrete.InvoiceDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Entities.Concrete.Tour", b =>
                {
                    b.HasOne("Entities.Concrete.Guide", "Guide")
                        .WithOne("Tour")
                        .HasForeignKey("Entities.Concrete.Tour", "GuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("Entities.Concrete.Tourist", b =>
                {
                    b.HasOne("Entities.Concrete.Country", "Country")
                        .WithMany("Tourists")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Nationality", "Nationality")
                        .WithMany("Tourists")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("GuideLanguage", b =>
                {
                    b.HasOne("Entities.Concrete.Guide", null)
                        .WithMany()
                        .HasForeignKey("GuidesGuideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaceTour", b =>
                {
                    b.HasOne("Entities.Concrete.Place", null)
                        .WithMany()
                        .HasForeignKey("PlacesPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourTourist", b =>
                {
                    b.HasOne("Entities.Concrete.Tourist", null)
                        .WithMany()
                        .HasForeignKey("TouristsTouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Tour", null)
                        .WithMany()
                        .HasForeignKey("ToursTourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Country", b =>
                {
                    b.Navigation("Tourists");
                });

            modelBuilder.Entity("Entities.Concrete.Guide", b =>
                {
                    b.Navigation("Tour")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Entities.Concrete.Nationality", b =>
                {
                    b.Navigation("Tourists");
                });

            modelBuilder.Entity("Entities.Concrete.Tourist", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
